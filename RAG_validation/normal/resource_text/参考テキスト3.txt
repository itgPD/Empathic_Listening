CHAPTER 36
カスタマーレターのテクニック
小規模で典型的な仕事の場合は市場機会評価で十分である。だが、規模の大きい仕事に取りかかる場合には、多様な理由や、解決すべき顧客の問題や、取り組まなければならないビジネスの目標がある。
価値を効果的に伝えるためには、前の章で挙げた4つの質問以上のものが必要になるだろう。
この規模の仕事の典型的な例はデザインの見直しである。デザインの見直しには複数の目標があることが多く、現在の顧客の体験を改善しつつ、新規顧客にとってもさらに優れたものにすることの両方が求められることもある。
私が好きな、ITを基盤にした製品企業の1つはAmazonである。Amazonは、いくつかの破壊的なものを含む全てのイノベーションを絶えず実行し、スケールアップしてもイノベーションが続けられることを証明してきた。私が見るところ、今も続いているAmazonの製品の成功には、リーダーシップ、人材、文化など多くの理由があるが、中でも際立っているのは顧客を大切にする誠実な情熱である。だが、Amazonが製品を開発する方法の中心となっているのはいくつかのテクニックであり、その1つはワーキングバックワードプロセスと呼ばれている。
製品開発を架空のプレスリリースから始めるというものである。
この手法では、プログラドマネジャーが、製品が発売されたときのプレスリリースになるような仮想のプレスリリースを書き、開発チームに先行して仕事のフレームを作るのである。それはどのように顧客の生活を向上させるのか？顧客にとっての実際の利益は何か？プレスリリースは誰でも見たことがあるだろうが、唯一違う点は、まったく想像の産物だということで、私たちが作り出したい未来の状況を描いているのである。
製品開発チームにとって、顧客の利益を考慮せず、自分たちが開発しようと考えているすべての機能の一覧表にすぐに取りかかるのは非常に魅力的だ。ワーキングバックワードプロセスは、この誘惑に対抗し、開発チームをアウトプットではなくアウトカムに集中させることを意図している。
製品のプレスリリースを書く際に、開発チームが本当に製品を考え、その経験を顧客に最大限の効果をもたらすためにどうすればよいかを決定しなければならない。
製品に感動し、とても喜んでいる顧客からCEOに送られたカスタマーレターを読みながらなぜそんなに新製品や改良品に満足し、感謝しているかがわかる。手紙には、その製品によって顧客の生活がどんなふうに変わり向上したかが書かれている。また、カスタマーレターには、製品がどのようにビジネスに貢献したかを説明するCEOから製品開発チームへのお祝いのメッセージが含まれる。おかりだと思うが、このカスタマーレターのバリエーションはAmazonの仮想プレスリリースと非常によく似ていて、ほぼ同じ考え方を促すように意図されている。プレスリリースバージョンには顧客の声も含まれるのだ。
私がプレスリリーススタイルよりもカスタマーレターのほうをずっと好むのには2つの理由がある。第1に、プレスリリースの形式は少し古くさい。プレスリリースは、IT業界では昔のような役割を果たさなくなっていて、誰もじわがない。第2に、カスタマーレターのほうが顧客の現在の悩みへの共感を生む効果がはるかに高いし、自分たちの仕事がどのように顧客の生活に役立つかを開発チームにより明確に印象づけられる。
私は本物のカスタマーレターも大好きだ。読むとすごく意欲が湧く。そして重要なのは、カスタマーレターは、たとえ製品に批判的なものであっても、開発チームが心の底から問題を理解するのに役立ち、解決策を見つけなければという気持ちにさせてくれることである。

CHAPTER 37
スタートアップキャンバスのテクニック
ここまで、新機能の追加といった比較的小規模の小さな仕事や、デザインの見直しのような中規模から大規模な仕事のテクニックを見てきた。製品開発チームが実際に取り組む仕事の大部分はたぶんこうしたものである。
しかし、もっと包括的なフレーミングテクニックが必要になるような特に困難な状況もある。アーリーステージのスタートアップ企業で、新しいビジネスの原動力となる新製品を考え出そうとしている場合や、エンタープライズ規模の企業で働く人が、その企業によってすべてがまったく新しいビジネスキャンバスに、取り組んでほしいと頼まれた場合である。言い換えれば、既存の製品を改良するのではなく、完全に新しい製品を発明するよう求められている状況だ。
こうした状況では、もっと広範囲なリスクを抱えることになる。バリュープロポジションを立証することや、収益を上げる方法、製品を市場に出し顧客に販売するための計画、製品を製造し販売するのにかかるコスト、業務を適応するための尺度を考えることなどだ。市場がビジネスを維持するために十分な規模があるかどうかも見極める必要があるのは言うまでもない。
何十年もの間、人々は厚い事業計画を書いたり、これらの項目と、それにどうやって取り組むのかに重きを置いてきた。しかし、私を含め多くの人が、古い事業計画書は役立つところが書き足りていないほうが多く、理解されないことも多かった。
スタートアップキャンバス、それに似たビジネスモデルキャンバス、リーンキャンバスは、こうしたリスクを早期に見つけ出し、開発チームに前もって取り組ませるための軽量なツールである。私は旧式な事業計画書よりもスタートアップキャンバスのほうがずっと好みだ。なぜ同時に、多くのスタートアップの開発チームが依然としてキャンバスに多くの時間を使い、人々が見たいとなるソリューションを発見するという、ささいでありながら介入な問題を先延ばしに続けるのを見てきた（「最大のリスク」のコラムを参照）。
キャンバスは、規模の大小に関わらず、どんな製品の変更にも使えるが、既存の製品やビジネスがあるかは、キャンバスの大部分が変わらないことにすぐに気づくだろう。ただ複製されるだけだということにすぐに気づくだろう。すでに販売方法のモデルはあるが、収益化戦略のモデルもあり、明確なコスト構造もある。主に取り組むのは、同じソリューションで、より多くの価値を生み出すことだ。そういう場合には、前に書いたフレーミングテクニックの1つを参考にするほうが合理的だろう。
ただし、スタートアップキャンバスはもっと簡単な仕事にも使える。特に、新しいプロダクトマネジャーがいる場合は、スタートアップキャンバスを使えば、新しいプロダクトマネジャーは製品の全体像を的確に把握することができるし、主にビジネスのどういう分野に影響を与えるのかを理解することが容易になる
最大のリスク
スタートアップキャンバスに関して私が好きな点の1つは、スタートアップ企業や既存のビジネスにおいて重要な製品が直面する主要な仮定や大きなリスクに、すぐに光を当ててくれることだ。これはいかなる事業でも当てはまる。最大のリスクにこそ真っ先に取り組まなければならない。少なくともそれがセオリーである。
実際、私は、最大のリスクではなく2番目のリスクに焦点を当てる起業家やプロダクトリーダーをたくさん見てきた。そういう状況の原因の1つは、リスクが主観的であり定量化が難しいことだと思っている。だから、それぞれの視点次第で、ある要素を2番目のリスクだと思う人もいれば、それを最大のリスクだと考える人もいる。
しかし多くの場合、その理由は、自分がよく知っていて、コントロールできると思う分野に注目するのが人間の性質だということだ。仮にスタートアップの創業者が、おそらくMBAとしてのトレーニングを受けたビジネス界出身の人物だとしよう。その人は、優れたビジネスモデルを考え出すことに関するリスクを敏感に察知するだろう。そして、ほぼ独自のバリュープロポジション、価格設定、販売ルート、コストに焦点を当てる。これらはすべて現実のリスクであり、事業実現性の評価の一部である。
ただ、おそらく私はその人たちを集めて、それらは現実のリスクだが、現実性がほとんどない他の空論とも説明しなければならない。そのあと自分の経験を基に、スタートアップ企業や新製品が失敗する原因が何なのかを指摘する。
たぶんあなたは、私が市場リスクのことを言っていると思っているだろう。つまり、新しい製品は、顧客を本当に気にしていないか、重要ではない問題を解決することに焦点を当てているのではないかということだ。これは確かに現実的なリスクだが、取り組みの失敗に一定の責任を負っているが、多くの場合、最も重大なリスクではない。
そこでこの問題を補足説明をしておく必要がある。
第1に、私が見た開発チームの大部分は、まったく新しい問題を解決しようとしていないと言う言葉を聞きたい。それらの開発チームが取り組んでいるのは、長い実績のある市場の、長年にわたる問題なのだ。スタートアップ企業や新製品に関して違うのは、問題を解決するアプローチ（ソリューション）である。多くの場合、新たに使えるようになった技術を利用して、革新的な方法で問題を解決しているのがあるあるのパターンである。そうしたケースではまずまずうまくいっている。
第2に、市場が本当に新しいもので、現在存在が持っている需要を検証するためのテクニックは、これまでで最も優れていたものだ。もし、これらのテクニックを使っていないのなら、危険な道を進んでいると言えるだろう。これはまず重要だ。テクニックには時間や費用の面でもコストがかからないのだから、使わないという言い訳ができない。
例えば、製品開発において重要であって、最も大きいリスクの1つを特定するためには、スタートアップキャンバスでは、価値のリスクは、顧客に対して競争力のあるソリューションを発見するソリューションシステムの下に表示される。顧客がソリューションに乗り換えたらすぐに選んでくれるソリューションである。
これは一般的に非常に難しいが、新製品が置き換えをためらわなければならないことは、製品が同じ機能を持っている（もしくは機能の重なりを持って呼ばれる）だけではなく、明確なコスト構造を持っているという意味だ。
これは高いハードルだ。
しかし、これまでにキャンバスを作ったことがあれば、キャンバスにはソリューションについてほとんど重要なことがないと感じたことがあるだろう。公式とも呼べそうなその原因は、自分のアプローチに夢中になり、即座にそれを決め込んでしまうほうが、はるかに容易だということだ。公正に見て、これは開発チームに関わるとても本質的な問題である。私はこういう行動を頻繁に見ている。だが、キャンバスにソリューションが十分に表現されない結果、多くの人がやるように、彼らが安心して対応できるリスクだけに焦点を当て、そのソリューションの開発をエンジニアに任せてしまうのだ。
私たちは、ソリューションを考えることを人に任せたり先送りしたりせず、製品の発展をスタートアップの最も重要なコアコンピテンシーとして積極的に受け止める必要がある。
もし顧客に愛されるソリューションが発見できなければ、収益性とスケールアップのリスクに取り組める。だが、そのソリューションが発見できなければ、ほかの仕事は無駄に終わる可能性が非常に高い。だから、制約のあるリソースが現在あるとしても軽量版の忍耐力であっても、自分の時間を成功するソリューションの発見に優先して使うことが必要だ。まずそのリスクを解決すれば、あとはほかのリスクに集中できる。
重要なことは、本当に価値のある製品を発見するまで、価格最適化テストや、販売ツール、マーケティングプログラム、コストの削減などに時間を使う必要はないということだ。

CHAPTER 41 顧客インタビュー
顧客インタビューは本書で説明する最も基礎的なテクニックである。プロダクトマネジャーならすでにこのテクニックを知っていて、実際に何度も使っているのが当然なので、取り上げる必要はないかもしれない。
しかし、実際にはそれほど実行されていない。あるいは、顧客インタビュー自体はおこなわれていても、プロダクトマネジャーが同席していなかったり、得た知識が心底から理解されていなかったり、必要な深刻さで受け止められていないのだ（Chapter 33「製品発見の原則」のも参照）。
だが、言うまでもなく、これはすべてのプロダクトマネジャーにとって最も強力で重要なスキルの1つであり、多くのブレイクスルーとなる製品のアイデアの源になったり、ひらめきを生んだりしている。
あとで製品のアイデアを定性的にテストするテクニックについて述べるが、これらのスキルはその前提条件になっている。
顧客インタビューにはさまざまな形があるので、実際には1つのテクニックではない。どれだけ雰囲気のものもあるし、きちんとした形式のものもある。ユーザーリサーチの方法論（私が好きなものの1つはコンテクストインタビューである）に基づいたものもあるし、ただオフィスを出て知らなかったことを学ぶというものもある。
しかし、ユーザーや顧客とのあらゆるやりとりには、常に貴重な心を得るチャンスがある。私がいつも理解しようと心がけているのは次のようなことだ。
顧客はあなたが考えていたような人たちか？
顧客は本当にあなたが考えるような問題を持っているか？
顧客は現在、その問題をどうやって解決しているか？
顧客を自社製品に乗り換えさせるためには何が必要か？
これらの問いの答えを得る方法はたくさんあるが、ユーザーリサーチャーに依頼できるのであれば、その指示に従えばいい。学習機会から最大限のものを引き出すためのヒントをいくつか挙げよう。
目的
インタビュー中にどうにかして何かを証明しようとしてはいけない。すぐに理解して学習することに専念する。このマインドセットは重要であり、誠実でなければならない。
ユーザーや顧客の集め方
これについては、ユーザビリティテストのテクニックを取り上げるときに詳しく述べる。今は、ターゲット市場の人々と優先的に話をするようにしよう。とは言っても、約1時間が目安だ。
場所
顧客が普段暮らしている場所で会えば成長が得られる。環境を観察するだけでもわかることがたくさんある。だが、どこか便利な場所で会ってもいいし、オフィスに来てもらってもいいし、ビデオ通話を使うのがベストとは言えないが、まったくインタビューができないのと比べるとはるかにましである。
準備
事前に、顧客がどんな問題を持っているのかについての自分の考えを明確にし、それに対してどんなふうに同意したり反論したりするのかを考えておく。
誰が出席すべきか
私は3人で行くことを勧める。プロダクトマネジャーと、プロダクトデザイナー、開発チームのエンジニアのうちの1人（通常は出席を希望するエンジニアの中でローテーションする）である。（大概、インタビューの上手なやり方を訓練されている）デザイナーが主導し、プロダクトマネジャーはメモを取り、開発者はやりとりを見ているのが普通だ。
インタビュー
自然で堅苦しくない雰囲気を作るように努め、質問は自由回答形式にし、今、相手が何をしているのかを知るようにしよう（何をしたいと思っているかも興味深いが、それは二の次だ）。
終わった後
仲間と報告をし合い、全員が同じことを見聞きし、同じことを学習したかどうかを確認する。インタビューの間に顧客に約束したことがあれば、忘れずに実行しよう。
この時間はあなたの将来の時間に確実に大きな見返りをもたらすはずだ。先に挙げた、鍵となる質問の答えを知ることは重要である。だが、私は顧客インタビューの時間を使っていくつかの製品のアイデアを試してみるのも大好きだ。もちろん、鍵となる質問の答えを聞いたあとでもだが、またとないチャンスなので、その機会を余すことなく利用している。
発見のプロトタイピングテクニック
概要
問題の解決にITを使うようになって以来、さまざまな形のプロトタイプが存在してきた。有名なフレッド・ブルックスの言葉を借りれば、「捨てるプランを立てるべきである。いずれにせよ、そうすることになるだろう」ということだ。
フレッドの言葉は、その本が最初に出版されたとき（1975年！）と変わらず、現在でも重要だが、当時からは多くのことが変化している。中でも著しいのは、プロトタイプの開発とテストに使うツールやテクニックが劇的に進化したことである。
とは言っても、いまだに多くの開発チームがプロトタイプという言葉の意味をすごく狭く解釈しているし、私が業界を見ての第一人者やリーダーだと考えている人々ですらそうなのだ。
私がもっと正確にと促すと、聞かれた人々は、たいてい、プロトタイプという言葉を自分たちが最初に見た実現可能性のテストと結びつける。もし最初に見たものが実現可能性のテストに使われていたなら、それがその人にとってのプロトタイプになるし、ユーザビリティーのテストに使われていたなら、それがその人にとってのプロトタイプになる。
しかし、プロトタイプには実に多種多様な形があり、それぞれが異なった特徴を持ち、異なった要素のテストに適している。そのため、目前の仕事に不適切なプロトタイプを使おうとして混乱に陥る人もいる。
この概要では、プロトタイプの主要な種類を示し、後続の章ではそれぞれを詳しく説明する。
実現可能性プロトタイプ
これは、製品発見の過程、つまり、あるものが実現可能かどうかを判断する前に、エンジニアが技術的な実現可能性のリスクに対処するために書くものである。エンジニアが新しい技術を試そうとする場合もあるし、新しいアルゴリズムである場合もあるが、多くは性能を評価するもので、このプロトタイプの意図図は、開発者が、実現可能性のリスクに対処するのに十分なだけのコードを書くことである。
ユーザープロトタイプ
ユーザープロトタイプはシミュレーションである。ユーザープロトタイプには大きな幅があり、窓口的に、紙にスケッチされたワイヤーフレームに似せてデザインされた（低忠実度のユーザープロトタイプと呼ばれる）ものから、シミュレーションだとわからない、本物のようなルックアンドフィールを持つ（高忠実度のユーザープロトタイプと呼ばれる）ものまでさまざまである。
ライブデータプロトタイプ
ライブデータプロトタイプはやや複雑で説明が難しいが、状況によっては不可欠なツールである。ライブデータプロトタイプの主な目的は、何かを証明するために現実のデータを集めること、あるいは、あるアイデア（機能、デザインアプローチ、ワークフロー）が実際にうまくいくかどうかを判断する証拠を集めることである。
これには通常、2つのことを意味している。1つ目は、ライブデータのソースにアクセスするためにプロトタイプが必要であること。2つ目は、有用なデータを得るのに十分な量のライブトラフィックをプロトタイプに送る必要があることだ。
重要なのは、ライブデータプロトタイプがあれば、商業的に実現可能な製品をビルド、テストし、デプロイしなくても済むことである。これらを実行すれば、はるかに大きな時間とコストがかかり、膨大な無駄を生み出すだろう。ライブデータプロトタイプは、商業的に実現可能な製品のビルドにかかるコストのごく一部しか必要としない。それがこのプロトタイプが非常に強力なツールになっている理由だ。
ハイブリッドプロトタイプ
また、さまざまなプロトタイプの特徴を組み合わせたハイブリッド型も数多くある。たとえば、検索・推奨案の精度に取り組んでいる場合は、プロトタイプがライブデータのソースにアクセスできるようにする必要があるが、ライブトラフィックを送る必要はない。この場合、何かを証明しようとしているのではなく、ユーザーと一緒に結果を観察し意見を交わすことで多くの学習ができるからである。
製品の発見は、アイデアを、最も速く、最もコストをかけずにテストする方法を考え出すことであると思い出してほしい。だから、個々のアイデアや状況によって、自分のニーズに最も合うフレーバーのプロトタイプを選ぶべきなのだ。

CHAPTER 45
プロトタイプの原則
Chapter 44で述べたように、プロトタイプには多くの形がある。どれを選ぶのが1番いいかは、取り組む具体的なリスクと製品の種類による。しかし、あらゆる形のプロトタイプに共通する特徴とメリットがある。プロトタイプを使うときの5つの重要な原則を次に挙げる。
あらゆる形のプロトタイプに共通する目的は、時間と労力において、製品を作るよりはるかに小さなコストで何かを学ぶことである。どんな形のプロトタイプでも、最終的な製品より少なくとも1桁少ない時間と労力で実行できなければならない。
あらゆる形のプロトタイプに共通する重要なメリットの1つは、ただ議論したり何かを書いたりする場合と比べて、開発チームがはるかに深いレベルでじっくり問題を考えるようになることだ。その結果、プロトタイプを作るという行為そのものが、作っていなければずっとあとになって見つからなかった重要な問題を、しばしば顕在化させる。
同様に、プロトタイプは開発チームが協力するための強力なツールでもある。製品開発チームのメンバーとビジネスパートナーの全員がプロトタイプを体験し、共通の理解を深めるのだ。
プロトタイプにはさまざまなレベルの忠実度を持っている。忠実度とは、基本的にプロトタイプがどれほど現実的に見えるかを言う。ただし、最適なレベルの忠実度というものがあるわけではない。プロトタイプが現実的に見える必要性がまったくない場合もあるし、本物そっくりに見えなければならない場合もある。原因は、目的に合ったレベルの忠実度を実現することである。低忠実度のプロトタイプは高忠実度のプロトタイプよりも動作が速いし低コストなので、必要なときだけ忠実度のプロトタイプを使うようにしよう。
プロトタイプの基本的な目的は、製品を見直していくべき製品リスク（価値、ユーザビリティー、実現可能性、事業実現性）に取り組むことである。だが、多くの場合、プロトタイプにはもう1つのメリットがある。エンジニアをはじめ、もっと大きな観点で、何をビルドする必要があるのかを伝えることができるのだ。これは、しばしば仕様書としてのプロトタイプと呼ばれる。多くの場合、プロトタイプはその目的を十分に果たすが、そうでないケースもある。特に、エンジニアが同じ場所にいない場合や、製品が特別複雑な場合は、プロトタイプにさらに詳しい情報（通常は、ユースケース、ビジネスルール、許容基準）を付け加える必要があるだろう。

CHAPTER 46
実現可能性プロトタイプのテクニック
製品のアイデアを聞いたエンジニアは、たいていの場合、実現可能性には問題がないと言う。過去に何度も同じようなものをビルドした経験があるからだ。しかし、具体的な問題の解決に取り組む中で、エンジニアは重要な実現可能性のリスクにぶつかるかもしれない。よくあるのは次のような状況だ。
アルゴリズムの問題
性能の問題
拡張性の問題
フォールトトレランスの問題
開発チームがそれまで使ったことがないテクノロジーの使用
開発チームがそれまで使ったことがないサードパーティー製の部品やサービスの使用
開発チームがそれまで使ったことがないレガシーシステムの使用
ほかの開発チームによる新たな変更や、関連する変更への依存
こうしたリスクに取り組むために使われる代表的なテクニックは、1人以上のエンジニアが実現可能性プロトタイプをビルドすることである。エンジニアが実現可能性プロトタイプを作るのは、それが通常、コードであるからだ（それに対して、ほとんどのプロトタイプは、プロダクトデザイナーが使うことを前提とした専用のツールによって作られる）。実現可能性プロトタイプは、商品として出荷できる製品とはかけ離れたものでもある。通常は、出荷可能な製品製品にいたるまでの仕事のごく一部にすぎない。
さらに多くの場合、実現可能性プロトタイプは使い捨てを前提としている。同じ命令で作られたものだ。実現可能性プロトタイプは、たとえばデータを収集し、その性能が許容できるかまでをきっかけにわかれば十分と考えている。通常は、ユースケーステスト、エラー処理、製品化に含まれるほかの典型的な機能もない。
私の経験では、1つの実現可能性プロトタイプをビルドするのに必要な時間は1日から2日が普通である。ただし、機械学習技術を使ったアプローチというような、新しい主要技術を検討している場合は、実現可能性プロトタイプのビルドにはもっと時間がかかる可能性が高い。
実現可能性プロトタイプに必要な時間の見積もりはエンジニアから出されるが、実際に開発チームそれぞれの時間を使うかどうかは、アイデアを追求する価値についてのプロダクトマネジャーの判断に委ねられる。
プロダクトマネジャーは、その問題に対するほかの多くのアプローチには技術的な実現可能性のリスクがないから、実現可能性のプロトタイプが必要なこのアイデアは飛ばしてほかを当たろうと言うかもしれない。
実現可能性プロトタイプを作るのはエンジニアだが、それは市場投入の仕事ではなく製品発見の仕事と見なされる。具体的なアプローチやアイデアを、さらに追求するかどうかを見極める作業の一環として実行されるからだ。
私が得た教訓から言うと、多くの開発チームが実現可能性のリスクを十分に考慮せずに高市場投入するために必要な仕事量を過小評価して失敗した開発チームの話を聞くと、たいていの場合、それが根本的な原因である。
つまり、単にエンジニアがその見積もりに十分に不慣れであるか、エンジニアやプロダクトマネジャーが今後必要になるものについて十分に理解していないか、あるいはプロダクトマネジャーがエンジニアに考えさせるための十分な時間を与えていないか、のどれかが原因である可能性が高い。

CHAPTER 48
ライブデータプロトタイプのテクニック
時々、製品発見の過程で明らかになった大きなリスクに対処するために、実際に使用されているデータの収集が必要になることがある。だが、この証拠収集が必要になるのは製品発見の途中であり、通常、拡張性があり出荷可能な実際の製品をビルドする時間と費用が許される前なのだ。
こうした状況の例として私が好きで挙げるのは、ゲームの挙動や、検索結果の正確性、多くのソーシャル機能、製品のファネル分析に応用するケースだ。これがライブデータプロトタイプの目的である。
ライブデータプロトタイプの実装は非常に限定されている。通常必要とされる、フルセットのユースケース、自動化テスト、完全な分析計装、国際化とローカリゼーション、性能と拡張性、SEO作業などの製品化作業がないのが普通だ。
ライブデータプロトタイプは最終的な製品よりもかなり小さく、品質、性能、機能の基準が大幅に低い。必要なのは、正常に動作して、極めて限定されたユースケースのデータを収集することであり、それがすべてだ。
ライブデータプロトタイプを作るとき、エンジニアはすべてのユースケースに対処するわけではない。国際化やローカリゼーションもおこなわないし、性能や拡張性の問題にも取り組まず、自動化テストも作成しない。エンジニアがなるべく、これからテストしようとする特定のユースケースのための計装だけである。
ライブデータプロトタイプは製品化作業のほんの一部（私の経験では、市場投入するための最終的な製品化作業の5～10％の間）に過ぎないが、そこから大きな価値を引き出すことができる。ただし、しっかりと頭に置いておかなければならない、2つの大きな制限がある。
第1に、ライブデータプロトタイプはコードによるので、デザイナーではなくエンジニアが作らなければならない。
第2に、ライブデータプロトタイプは商業的に出荷可能な製品ではなく、ピーク時に対応できるようになっていないので、これを使ってビジネスをすることはできない。だから、ライブデータテストがうまくいって、製品化に進むことを決めたら、市場投入作業に必要な時間をエンジニアに与えなければならない。プロダクトマネジャーはエンジニアに「これでいい」と言ってはいけない。その制限をプロダクトマネジャーがしてはならないのだ。プロダクトマネジャーは、主要な経営幹部やステークホルダーにもそれら2つの制限を理解してもらう必要がある。
現在ではライブデータプロトタイプを作る技術が進んでいるので、必要なものが通常2日から1週間で得られる。必要なものが手に入れば、あとのイテレーションに時間はかからない。この先で定量的評価のテクニックについて述べるときに、ライブデータプロトタイプを利用する別の方法を紹介する。だが今は、ある限られた量のトラフィックを送ることができ、そのライブデータプロトタイプが、どのように使われているかについての分析結果を集められることが肝心だと理解しておこう。
実際のユーザーが現実の作業でライブデータプロトタイプを使うと、現行の製品または開発チームの予測と比較できる実データ（分析結果）が生成され、新たなアプローチの性能が優れているかどうかを判断できる。それが重要なことだ。

CHAPTER 47
ユーザープロトタイプのテクニック
製品発見における最も強力なツールの1つ、ユーザープロトタイプはシミュレーションである。巧妙なトリックであり、見せかけだ。幕の後ろには何もない。たとえば、eコマースサイトのユーザープロトタイプを作るというのは、クレジットカード情報を何度でも好きなだけ入力できるということだ。実際には何も買うわけではない。
ユーザープロトタイプには幅広い種類がある。
一方の端にあるのは低忠実度のユーザープロトタイプだ。低忠実度のユーザープロトタイプは本物には見えない。基本的にはインタラクティブなワイヤーフレームである。多くの開発チームは、チーム内でじっくりと製品を検討する手段として使っているが、ほかの用途もある。
だが、低忠実度のユーザープロトタイプは、製品の1つの側面、つまり情報とワークフローを表しているに過ぎない。具体的な例を2つだけ挙げると、ビジュアルデザインが生む効果がないし、実際のデータによって生じる違いもない。
もう一方の端にあるのが高忠実度のユーザープロトタイプである。高忠実度のユーザープロトタイプもシミュレーションであることに変わりないが、非常にリアルなルックアンドフィールを持っている。実際、よくできた高忠実度のユーザープロトタイプの多くは、ほとんど見えない本物と見分けがつかない。目にするデータもとても現実的だが、これも本物ではない。ライブデータではないことがわかる程度だ。
たとえば、eコマースのユーザープロトタイプで特定の種類のマウンテンバイクを検索すると、常に同じ何台かのマウンテンバイクが表示される。だが、よく見ると、それは見つけたかった実際のマウンテンバイクではない。そして、どんなに価格やスタイルの条件を変えて検索しても、必ず同じ何台かのマウンテンバイクが表示されるのだ。
検索結果のデータが正確に更新されないかぎり、それは本物のデータを使っているのではないからだが、総合的に快適なショッピング体験を考えたり、人気がマウンテンバイクを探すときにどのように検索するかを考える場合には、これでも十分だし、これなら手早く簡単に作れる。
ユーザープロトタイプを作るためのツールは、デバイスの種類や忠実度に応じてさまざまだ。ツールは主にプロダクトデザイナーを対象に開発される。実際に、プロダクトデザイナーはお気に入りのユーザープロトタイピングツールを1つは持っているはずだ。
デザイナーの中には忠実度の高いプロトタイプを自分でコーディングするのを好む人もいる。動作が速く、使い捨てにするのを気にしないならそれでも構わない。ユーザープロトタイプは、顧客にとっての製品がよく売れるかどうか、何かを証明するのには向いていないことだ。未熟な製品開発者の多くがやるすぎなのは、高忠実度のユーザープロトタイプを作って10～15人の人々に見せ、全員にすごく気に入ったと言われたときである。未熟な製品開発者は自分たちの製品の適切さが立証されたと勘違いするが、残念ながらそうではない。人というのは、いろんなことを言うだけ言って、そのあとは言葉と違った行動を取るものだ。価値を立証するためなら、はるかに優れたテクニックがほかにある。
ユーザープロトタイプは製品開発チームにとって最も重要なテクニックの1つである。だから、開発チームがさまざまな忠実度のユーザープロトタイプを作る技術と経験を増やすことには大きな価値がある。後の章で述べるが、ユーザープロトタイプは何種類かの実証テクニックの鍵であると同時に、私たちが持っている最も重要なコミュニケーションツールでもある。

CHAPTER 49
ハイブリッドプロトタイプのテクニック
ここまで3種類のプロトタイプを詳しく見てきた。純粋なシミュレーションであるユーザープロトタイプ、技術的リスクに対処するための実現可能性プロトタイプ、ある製品やアイデアの有効性に関して、その証拠や統計的に有意な証明まで収集できるようにデザインされたライブデータプロトタイプである。
これら3つのカテゴリのプロトタイプがあれば、ほとんどの状況にうまく対応できるが、3つのプロトタイプの異なった要素をさまざまに組み合わせたハイブリッドプロトタイプも多種多様にある。
私が気に入っているハイブリッドプロトタイプの1つであり、製品発見において迅速に学習する上で際立って強力なツールは、現在、よく「オズの魔法使いプロトタイプ」と呼ばれているものである。オズの魔法使いプロトタイプは、高忠実度のユーザープロトタイプのフロントエンドのユーザーエクスペリエンスと、最終的な製品では自動で処理されることを手作業でおこなう現実の人間をその背後において組み合わせたものだ。
オズの魔法使いプロトタイプには拡張性が無く、決して大量のトラフィックを送ることはできない。しかし、開発者の視点から見れば、とても素早く簡単に作れるという利点があり、ユーザーの視点から見れば、本物の製品のように見えるし、本物のように動作するという利点がある。
たとえば、現在、あなたの会社が顧客に対して何らかのライブチャットをベースにしたサポートをおこなっているとしよう。だが、これが利用できるのはカスタマーサービスのスタッフがオフィスにいる時間帯だけである。あなたは、世界中の顧客があらゆる時間にあなたの製品を使っているのを知っているので、役に立つ答えをいつでも提供する自動ライブチャットをベースにしたシステムを開発したいと考えるだろう。
あなたはカスタマーサービスのスタッフから、スタッフたちは日常的に受けているお問い合せと、それにどのように答えているかを聞くことができる（し、そうすべきである）。また、それを迅速に学習するにはコンシェルジュオズが役立つ。自動化とは、今後しばらくの間問題に取り組むべきだろう。
短時間で済み、いくつかの異なるライブデータテストを行うための方法は、チャットベースのインターフェースを持ったオズの魔法使いプロトタイプを作ることだ。だがプロトタイプの動作は、皆にプロダクトマネジャーとしてしてもらわなければならない。開発チームの誰かが隠れていて、要望を聞き、応答を作っているのだ。すぐに、開発チームは応答を自動生成するシステムの実装を始める。使うのは、おそらく、自分たちが考えたアルゴリズムを実装したライブデータプロトタイプである。
この種のハイブリッドプロトタイプは、製品を発見するためである、スケール化してビルドする前にあるいはアイデアの良い例である。よって頭を使えば、とても迅速に学習できるツールを手早く簡単に作ることができる。確かに、それは技性的学習が早くなるが、私たちの最も大きな心配は、しばしば定性的学習から生まれるのだ。
実現可能性にも問題がないことがわかれば、利益関係を持つ可能性がある（法務、マーケティング、販売、CEOなどの）主要部門にそのアプローチを示す。こうしたビジネスのリスクに対処するのは大抵最後である。というのは、プロダクトマネジャーは、やってみる価値があるという自信がないかぎり組織を混乱させたくないからだ。ときには、最終的なアイデアが、検討を始めたオリジナルのアイデアとはだいぶ違ったものになったが、実はオリジナルのアイデアを出したのはステークホルダーだった、ということがある。そういう場合、何が顧客に役立ち、何が役立たなかったかの証拠をステークホルダーに示し、最終的にどういう理由と経緯でそういう形になったかを説明するのが何よりも効果的だ。